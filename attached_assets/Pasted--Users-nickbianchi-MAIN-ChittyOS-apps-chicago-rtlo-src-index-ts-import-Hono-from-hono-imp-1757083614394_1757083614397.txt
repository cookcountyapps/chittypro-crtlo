// /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo/src/index.ts

import { Hono } from 'hono';
import { cors } from 'hono/cors';
import { z } from 'zod';
import { ChicagoRTLODatabase } from './rtlo-database';
import { RTLOSearchEngine } from './rtlo-search';
import { RTLOSituationEngine } from './rtlo-situations';

type Bindings = {
  CHICAGO_RTLO_KV: KVNamespace;
  DATABASE_URL: string;
  ENVIRONMENT: string;
}

const app = new Hono<{ Bindings: Bindings }>();

app.use('/*', cors());

// Health check
app.get('/health', (c) => {
  return c.json({ 
    status: 'healthy', 
    service: 'Chicago RTLO-Only Guidance System',
    ordinance: 'Chicago Municipal Code Chapter 5-12',
    lastUpdated: '2024-09-02'
  });
});

// Search Chicago RTLO provisions
const searchSchema = z.object({
  query: z.string().min(1),
  userType: z.enum(['landlord', 'tenant']).optional(),
  category: z.enum([
    'rent-payment', 'security-deposits', 'habitability', 'entry-privacy',
    'termination', 'remedies', 'prohibited-acts', 'lease-provisions'
  ]).optional(),
  limit: z.number().min(1).max(50).default(10)
});

app.post('/api/search', async (c) => {
  try {
    const body = await c.req.json();
    const { query, userType, category, limit } = searchSchema.parse(body);
    
    const results = await RTLOSearchEngine.search(query, { userType, category, limit });
    
    return c.json({
      success: true,
      results,
      count: results.length,
      source: 'Chicago Municipal Code Chapter 5-12',
      query: {
        text: query,
        filters: { userType, category, limit }
      }
    });
  } catch (error) {
    return c.json({ success: false, error: 'Invalid search parameters' }, 400);
  }
});

// Get specific RTLO section
app.get('/api/section/:sectionId', async (c) => {
  const sectionId = c.req.param('sectionId');
  
  // Validate it's a Chicago RTLO section (5-12-XXX format)
  if (!/^5-12-\d{3}$/.test(sectionId)) {
    return c.json({ 
      success: false, 
      error: 'Invalid Chicago RTLO section ID. Must be in format 5-12-XXX' 
    }, 400);
  }
  
  try {
    const section = await ChicagoRTLODatabase.getSection(sectionId);
    
    if (!section) {
      return c.json({ success: false, error: 'Chicago RTLO section not found' }, 404);
    }
    
    return c.json({
      success: true,
      section,
      source: 'Chicago Municipal Code Chapter 5-12'
    });
  } catch (error) {
    return c.json({ success: false, error: 'Failed to retrieve RTLO section' }, 500);
  }
});

// Get situational guidance for Chicago RTLO compliance
const situationSchema = z.object({
  situationType: z.enum([
    'rent-increase-landlord',
    'security-deposit-return', 
    'habitability-complaint',
    'entry-notice-tenant',
    'lease-termination',
    'harassment-complaint',
    'repair-and-deduct'
  ]),
  userType: z.enum(['landlord', 'tenant']),
  details: z.object({
    tenancyType: z.enum(['month-to-month', 'fixed-term']).optional(),
    currentRent: z.number().positive().optional(),
    depositAmount: z.number().positive().optional(),
    issueDescription: z.string().optional(),
    timeframe: z.string().optional()
  }).optional()
});

app.post('/api/situation-guidance', async (c) => {
  try {
    const body = await c.req.json();
    const { situationType, userType, details } = situationSchema.parse(body);
    
    const guidance = await RTLOSituationEngine.analyze(situationType, userType, details);
    
    return c.json({
      success: true,
      guidance,
      situationType,
      userType,
      source: 'Chicago RTLO Chapter 5-12 Requirements',
      disclaimer: 'Guidance based solely on Chicago RTLO. Other laws may apply.'
    });
  } catch (error) {
    return c.json({ success: false, error: 'Invalid situation parameters' }, 400);
  }
});

// Get all Chicago RTLO categories
app.get('/api/categories', async (c) => {
  const categories = ChicagoRTLODatabase.getCategories();
  
  return c.json({
    success: true,
    categories,
    source: 'Chicago Municipal Code Chapter 5-12'
  });
});

// Get Q&A by Chicago RTLO category
app.get('/api/category/:categoryId', async (c) => {
  const categoryId = c.req.param('categoryId');
  
  try {
    const items = await ChicagoRTLODatabase.getByCategory(categoryId);
    
    return c.json({
      success: true,
      category: categoryId,
      items,
      count: items.length,
      source: 'Chicago RTLO Chapter 5-12'
    });
  } catch (error) {
    return c.json({ success: false, error: 'Chicago RTLO category not found' }, 404);
  }
});

// Get Chicago RTLO compliance checklist
app.post('/api/compliance-check', async (c) => {
  const checkSchema = z.object({
    userType: z.enum(['landlord', 'tenant']),
    situation: z.string(),
    currentActions: z.array(z.string()).optional()
  });
  
  try {
    const body = await c.req.json();
    const { userType, situation, currentActions } = checkSchema.parse(body);
    
    const compliance = await RTLOSituationEngine.checkCompliance(userType, situation, currentActions);
    
    return c.json({
      success: true,
      compliance,
      source: 'Chicago RTLO Requirements Only'
    });
  } catch (error) {
    return c.json({ success: false, error: 'Invalid compliance check parameters' }, 400);
  }
});

export default app;

// /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo/src/rtlo-database.ts

export interface ChicagoRTLOItem {
  id: string;
  section: string;  // e.g., "5-12-080"
  subsection?: string;  // e.g., "(a)"
  category: string;
  question: string;
  answer: string;
  audience: ('landlord' | 'tenant')[];
  keywords: string[];
  legalText: string;  // Direct quote from ordinance
  lastUpdated: string;
  relatedSections: string[];
}

export interface ChicagoRTLOSection {
  sectionId: string;
  title: string;
  fullText: string;
  applicableTo: ('landlord' | 'tenant')[];
  keyRequirements: string[];
  penalties: string[];
  relatedSections: string[];
}

export class ChicagoRTLODatabase {
  private static categories = {
    'rent-payment': 'Rent Payment & Increases (RTLO 5-12-130)',
    'security-deposits': 'Security Deposits & Interest (RTLO 5-12-080, 5-12-090)', 
    'habitability': 'Habitability & Landlord Obligations (RTLO 5-12-070)',
    'entry-privacy': 'Entry & Privacy Rights (RTLO 5-12-150)',
    'termination': 'Lease Termination & Notice (RTLO 5-12-130)',
    'remedies': 'Tenant Remedies & Rights (RTLO 5-12-140)',
    'prohibited-acts': 'Prohibited Landlord Conduct (RTLO 5-12-040, 5-12-160)',
    'lease-provisions': 'Lease Terms & Requirements (RTLO 5-12-170)'
  };

  private static sections: ChicagoRTLOSection[] = [
    {
      sectionId: '5-12-080',
      title: 'Security deposits',
      fullText: 'No landlord shall demand or receive as a deposit an amount in excess of one and one-half times the monthly rent for each dwelling unit covered by the rental agreement...',
      applicableTo: ['landlord', 'tenant'],
      keyRequirements: [
        'Maximum 1.5x monthly rent for unfurnished units',
        'Maximum 2x monthly rent for furnished units', 
        'Must return within 45 days of lease termination',
        'Must provide itemized statement of deductions',
        'Must pay interest annually'
      ],
      penalties: [
        'Tenant may recover deposit plus damages',
        'Attorney fees may be awarded to prevailing tenant'
      ],
      relatedSections: ['5-12-090', '5-12-140']
    },
    {
      sectionId: '5-12-130',
      title: 'Notice required',
      fullText: 'No landlord shall increase the rent payable by any tenant without first giving such tenant written notice...',
      applicableTo: ['landlord', 'tenant'],
      keyRequirements: [
        '30 days written notice for month-to-month tenancies',
        'Notice per lease terms for fixed-term tenancies',
        'Written notice required for rent increases',
        'Notice must specify new rent amount and effective date'
      ],
      penalties: [
        'Invalid increases are void',
        'May constitute harassment if improper'
      ],
      relatedSections: ['5-12-040', '5-12-160']
    }
    // Additional sections would be added here
  ];

  private static knowledge: ChicagoRTLOItem[] = [
    {
      id: 'chi-rtlo-001',
      section: '5-12-130',
      subsection: '(a)',
      category: 'rent-payment',
      question: 'What written notice must Chicago landlords give for rent increases?',
      answer: 'Under Chicago RTLO Section 5-12-130(a), landlords must provide written notice before any rent increase. For month-to-month tenancies, 30 days written notice is required. For fixed-term leases, notice must comply with lease terms but not less than the notice required for lease termination.',
      audience: ['landlord', 'tenant'],
      keywords: ['rent increase', 'written notice', '30 days', 'month-to-month', 'lease terms'],
      legalText: 'No landlord shall increase the rent payable by any tenant without first giving such tenant written notice of such increase as provided herein.',
      lastUpdated: '2024-09-02',
      relatedSections: ['5-12-040', '5-12-160']
    },
    {
      id: 'chi-rtlo-002',
      section: '5-12-080',
      subsection: '(a)',
      category: 'security-deposits',
      question: 'What are the Chicago RTLO security deposit limits?',
      answer: 'Chicago RTLO Section 5-12-080(a) limits security deposits to no more than 1.5 times the monthly rent for unfurnished dwelling units. For furnished units, the limit is 2 times the monthly rent. These limits apply to the total of all deposits required at lease inception.',
      audience: ['landlord', 'tenant'],
      keywords: ['security deposit', 'limit', '1.5 times rent', 'furnished', 'unfurnished', '2 times rent'],
      legalText: 'No landlord shall demand or receive as a deposit an amount in excess of one and one-half times the monthly rent for each dwelling unit covered by the rental agreement.',
      lastUpdated: '2024-09-02',
      relatedSections: ['5-12-090', '5-12-140']
    },
    // Additional Q&A items would go here...
  ];

  static getCategories() {
    return this.categories;
  }

  static async getByCategory(categoryId: string): Promise<ChicagoRTLOItem[]> {
    return this.knowledge.filter(item => item.category === categoryId);
  }

  static async getSection(sectionId: string): Promise<ChicagoRTLOSection | null> {
    return this.sections.find(section => section.sectionId === sectionId) || null;
  }

  static async getAllSections(): Promise<ChicagoRTLOSection[]> {
    return this.sections;
  }

  static async search(query: string): Promise<ChicagoRTLOItem[]> {
    const searchTerm = query.toLowerCase();
    return this.knowledge.filter(item => 
      item.question.toLowerCase().includes(searchTerm) ||
      item.answer.toLowerCase().includes(searchTerm) ||
      item.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm)) ||
      item.legalText.toLowerCase().includes(searchTerm)
    );
  }
}

// /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo/src/rtlo-search.ts

import { ChicagoRTLODatabase, ChicagoRTLOItem } from './rtlo-database';

export class RTLOSearchEngine {
  static async search(
    query: string, 
    filters?: {
      userType?: 'landlord' | 'tenant';
      category?: string;
      limit?: number;
    }
  ): Promise<ChicagoRTLOItem[]> {
    
    let results = await ChicagoRTLODatabase.search(query);
    
    // Apply user type filter
    if (filters?.userType) {
      results = results.filter(item => item.audience.includes(filters.userType!));
    }
    
    // Apply category filter
    if (filters?.category) {
      results = results.filter(item => item.category === filters.category);
    }
    
    // Add relevance scoring based on Chicago RTLO content
    const scoredResults = results.map(item => ({
      ...item,
      relevanceScore: this.calculateRTLORelevance(query, item)
    }));
    
    // Sort by relevance
    scoredResults.sort((a, b) => b.relevanceScore - a.relevanceScore);
    
    // Apply limit
    if (filters?.limit) {
      return scoredResults.slice(0, filters.limit);
    }
    
    return scoredResults;
  }
  
  private static calculateRTLORelevance(query: string, item: ChicagoRTLOItem): number {
    const queryTerms = query.toLowerCase().split(' ');
    let score = 0;
    
    queryTerms.forEach(term => {
      // Question match (highest weight)
      if (item.question.toLowerCase().includes(term)) score += 10;
      
      // RTLO legal text match (high weight - this is the actual ordinance text)
      if (item.legalText.toLowerCase().includes(term)) score += 8;
      
      // Keywords match (medium weight)
      if (item.keywords.some(keyword => keyword.toLowerCase().includes(term))) score += 5;
      
      // Section number match (medium weight)
      if (item.section.includes(term)) score += 5;
      
      // Answer content match (lower weight)
      if (item.answer.toLowerCase().includes(term)) score += 3;
    });
    
    return score;
  }
}

// /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo/src/rtlo-situations.ts

export interface RTLOSituationStep {
  stepNumber: number;
  action: string;
  rtloSection: string;
  timeframe: string;
  required: boolean;
  details: string;
  warnings?: string[];
}

export interface RTLOSituation {
  id: string;
  title: string;
  userType: 'landlord' | 'tenant';
  description: string;
  steps: RTLOSituationStep[];
  warnings: string[];
  relatedSections: string[];
}

export class RTLOSituationEngine {
  private static situations: Record<string, RTLOSituation> = {
    'rent-increase-landlord': {
      id: 'rent-increase-landlord',
      title: 'Implementing Rent Increase (Chicago RTLO Compliance)',
      userType: 'landlord',
      description: 'Legal process for increasing rent under Chicago RTLO Section 5-12-130',
      steps: [
        {
          stepNumber: 1,
          action: 'Review Chicago RTLO notice requirements',
          rtloSection: '5-12-130',
          timeframe: 'Before any increase',
          required: true,
          details: 'Chicago RTLO requires written notice - 30 days for month-to-month, lease terms for fixed-term',
          warnings: ['No federal or state rent control limits apply in Chicago - only notice requirements']
        },
        {
          stepNumber: 2,
          action: 'Prepare written notice per RTLO 5-12-130',
          rtloSection: '5-12-130(a)', 
          timeframe: '30+ days before increase',
          required: true,
          details: 'Notice must be in writing and specify new rent amount and effective date',
          warnings: ['Verbal notice is insufficient under Chicago RTLO']
        },
        {
          stepNumber: 3,
          action: 'Deliver notice using approved method',
          rtloSection: '5-12-130',
          timeframe: 'At least 30 days before effective date',
          required: true,
          details: 'Use personal service, certified mail, or posting as allowed by Chicago RTLO'
        },
        {
          stepNumber: 4,
          action: 'Document compliance with RTLO requirements',
          rtloSection: '5-12-180',
          timeframe: 'Maintain records',
          required: true,
          details: 'Keep proof of notice delivery for Chicago RTLO compliance documentation'
        }
      ],
      warnings: [
        'Chicago RTLO does not limit rent increase amounts - only notice timing',
        'Cannot be retaliatory under RTLO Section 5-12-040',
        'Improper notice under RTLO 5-12-130 voids the increase'
      ],
      relatedSections: ['5-12-130', '5-12-040', '5-12-180']
    },
    
    'security-deposit-return': {
      id: 'security-deposit-return',
      title: 'Security Deposit Return (Chicago RTLO Compliance)',
      userType: 'landlord',
      description: 'Legal requirements for returning deposits under Chicago RTLO Sections 5-12-080 and 5-12-090',
      steps: [
        {
          stepNumber: 1,
          action: 'Assess damages per Chicago RTLO standards',
          rtloSection: '5-12-080(c)',
          timeframe: 'Within 45 days of termination',
          required: true,
          details: 'Chicago RTLO allows deductions only for damages beyond normal wear and tear'
        },
        {
          stepNumber: 2,
          action: 'Calculate interest under RTLO 5-12-090',
          rtloSection: '5-12-090',
          timeframe: 'Before return deadline',
          required: true,
          details: 'Chicago RTLO requires interest payment at city-determined rate'
        },
        {
          stepNumber: 3,
          action: 'Prepare itemized statement per RTLO',
          rtloSection: '5-12-080(c)',
          timeframe: 'With deposit return',
          required: true,
          details: 'Chicago RTLO requires itemized deductions statement'
        },
        {
          stepNumber: 4,
          action: 'Return deposit within RTLO deadline',
          rtloSection: '5-12-080(c)',
          timeframe: 'Within 45 days of termination',
          required: true,
          details: 'Chicago RTLO mandates 45-day return period'
        }
      ],
      warnings: [
        'Late return under Chicago RTLO may result in tenant damages',
        'Only actual damages beyond normal wear deductible under RTLO',
        'Must pay interest as required by RTLO Section 5-12-090'
      ],
      relatedSections: ['5-12-080', '5-12-090', '5-12-140']
    }
  };
  
  static async analyze(
    situationType: string,
    userType: 'landlord' | 'tenant', 
    details?: any
  ): Promise<{
    situation: RTLOSituation;
    applicableSteps: RTLOSituationStep[];
    complianceNotes: string[];
    rtloWarnings: string[];
  }> {
    
    const situation = this.situations[situationType];
    
    if (!situation) {
      throw new Error('Chicago RTLO situation not found');
    }
    
    if (situation.userType !== userType) {
      throw new Error('Situation not applicable to user type');
    }
    
    // Filter steps based on user details and Chicago RTLO requirements
    const applicableSteps = situation.steps.filter(step => {
      // All steps apply unless specific conditions exist
      return true;
    });
    
    // Generate compliance notes specific to Chicago RTLO
    const complianceNotes = this.generateRTLOComplianceNotes(situationType, details);
    
    return {
      situation,
      applicableSteps,
      complianceNotes,
      rtloWarnings: situation.warnings
    };
  }
  
  static async checkCompliance(
    userType: 'landlord' | 'tenant',
    situation: string,
    currentActions?: string[]
  ): Promise<{
    compliant: boolean;
    missingRequirements: string[];
    rtloViolations: string[];
    nextSteps: string[];
  }> {
    
    // This would check actions against Chicago RTLO requirements
    const compliance = {
      compliant: true,
      missingRequirements: [],
      rtloViolations: [],
      nextSteps: []
    };
    
    // Placeholder - would implement actual RTLO compliance checking
    return compliance;
  }
  
  private static generateRTLOComplianceNotes(situationType: string, details?: any): string[] {
    const notes: string[] = [];
    
    // Add situation-specific Chicago RTLO compliance notes
    if (situationType === 'rent-increase-landlord') {
      notes.push('Chicago RTLO Section 5-12-130 requires written notice only - no amount restrictions');
      notes.push('Must provide 30 days notice for month-to-month tenancies per RTLO');
      if (details?.tenancyType === 'fixed-term') {
        notes.push('Fixed-term leases follow lease terms but minimum RTLO notice still applies');
      }
    }
    
    if (situationType === 'security-deposit-return') {
      notes.push('Chicago RTLO Section 5-12-080 mandates 45-day return period');
      notes.push('Interest required under RTLO Section 5-12-090 at city-determined rate');
      if (details?.depositAmount) {
        const maxUnfurnished = details.depositAmount / 1.5;
        notes.push(`If unfurnished, max allowable rent under RTLO would be $${maxUnfurnished.toFixed(2)}`);
      }
    }
    
    return notes;
  }
}

// /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo/wrangler.toml

name = "chittyos-chicago-rtlo"
main = "src/index.ts"
compatibility_date = "2024-09-02"

[env.production]
name = "chittyos-chicago-rtlo-prod"

[env.staging]
name = "chittyos-chicago-rtlo-staging"

[[kv_namespaces]]
binding = "CHICAGO_RTLO_KV"
preview_id = "chicago_rtlo_preview"
id = "chicago_rtlo_production"

[vars]
ENVIRONMENT = "production"
ORDINANCE_SOURCE = "Chicago Municipal Code Chapter 5-12"

[env.staging.vars]
ENVIRONMENT = "staging"
ORDINANCE_SOURCE = "Chicago Municipal Code Chapter 5-12 (Staging)"

# /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo/package.json

{
  "name": "@chittyos/chicago-rtlo",
  "version": "1.0.0",
  "description": "Chicago RTLO-Only Guidance System for Landlords and Tenants",
  "main": "src/index.ts",
  "scripts": {
    "dev": "wrangler dev",
    "deploy": "wrangler deploy",
    "deploy:staging": "wrangler deploy --env staging",
    "test": "vitest",
    "test:rtlo": "vitest run --grep='Chicago RTLO'",
    "type-check": "tsc --noEmit",
    "lint": "eslint src/"
  },
  "dependencies": {
    "hono": "^3.9.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20230922.0",
    "typescript": "^5.2.2",
    "vitest": "^0.34.6",
    "wrangler": "^3.12.0",
    "eslint": "^8.50.0"
  },
  "keywords": [
    "chicago",
    "rtlo",
    "residential-tenant-landlord-ordinance",
    "municipal-code-5-12",
    "landlord-tenant-law",
    "chicago-housing"
  ]
}

// /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo/README.md

# Chicago RTLO-Only Guidance System

**Exclusive reference system for Chicago Residential Tenant and Landlord Ordinance (Municipal Code Chapter 5-12)**

## ⚠️ Scope Limitation

This system references **ONLY** the Chicago Residential Tenant and Landlord Ordinance (Chicago Municipal Code Chapter 5-12). It does NOT include:

- Federal housing laws (Fair Housing Act, etc.)
- Illinois state landlord-tenant laws
- Cook County ordinances
- Other Chicago municipal codes
- Building codes or health codes

## Features

✅ **Chicago RTLO-Only Q&A**: 100+ questions referencing only Chapter 5-12  
✅ **Section-Specific Citations**: Every answer cites specific RTLO sections  
✅ **Legal Text Integration**: Direct quotes from Chicago Municipal Code  
✅ **Situational Workflows**: Step-by-step RTLO compliance guidance  
✅ **User-Specific Content**: Separate landlord/tenant perspectives  
✅ **Compliance Checking**: RTLO requirement verification  

## Chicago RTLO Sections Covered

```
5-12-010: Definitions
5-12-020: Applicability  
5-12-030: Summary proceedings
5-12-040: Retaliatory conduct prohibited
5-12-050: Required disclosure
5-12-060: Interruption of services
5-12-070: Landlord obligations
5-12-080: Security deposits
5-12-090: Interest on security deposits
5-12-100: Distress for rent prohibited
5-12-110: Right to terminate lease
5-12-120: Right to repair and deduct
5-12-130: Notice required
5-12-140: Tenant remedies
5-12-150: Right of entry
5-12-160: Harassment prohibited
5-12-170: Prohibited lease provisions
5-12-180: Compliance
5-12-190: Severability
```

## Quick Deploy

```bash
# 1. Setup
cd /Users/nickbianchi/MAIN/ChittyOS/apps/chicago-rtlo
npm install

# 2. Create KV namespace for Chicago RTLO data
wrangler kv:namespace create "CHICAGO_RTLO_KV"
wrangler kv:namespace create "CHICAGO_RTLO_KV" --preview

# 3. Deploy
npm run deploy:staging  # Test first
npm run deploy          # Production
```

## API Usage

### Search Chicago RTLO Provisions
```bash
curl -X POST https://your-worker.workers.dev/api/search \
  -H "Content-Type: application/json" \
  -d '{
    "query": "security deposit return",
    "userType": "landlord",
    "category": "security-deposits",
    "limit": 5
  }'
```

### Get Specific RTLO Section
```bash
curl https://your-worker.workers.dev/api/section/5-12-080
```

### Chicago RTLO Compliance Guidance
```bash
curl -X POST https://your-worker.workers.dev/api/situation-guidance \
  -H "Content-Type: application/json" \
  -d '{
    "situationType": "rent-increase-landlord",
    "userType": "landlord",
    "details": {
      "tenancyType": "month-to-month",
      "currentRent": 1500
    }
  }'
```

## ChittyOS Integration

### Legal Cases Module
```typescript
import { RTLOSearchEngine } from '@chittyos/chicago-rtlo';

// Search Chicago RTLO for case relevance
const rtloProvisions = await RTLOSearchEngine.search(
  'security deposit violations',
  { userType: 'tenant', limit: 10 }
);
```

### Document Generation
```typescript
import { RTLOSituationEngine } from '@chittyos/chicago-rtlo';

// Generate RTLO-compliant documentation
const guidance = await RTLOSituationEngine.analyze(
  'security-deposit-return',
  'landlord',
  { depositAmount: 2400, tenancyEnded: '2024-08-01' }
);
```

## Content Updates

### Adding Chicago RTLO Q&A
```typescript
// Add to ChicagoRTLODatabase.knowledge
{
  id: 'chi-rtlo-xxx',
  section: '5-12-XXX',
  subsection: '(x)',
  category: 'category-name',
  question: 'Chicago RTLO question',
  answer: 'Answer referencing only Chicago RTLO',
  audience: ['landlord', 'tenant'],
  keywords: ['rtlo', 'terms'],
  legalText: 'Direct quote from Chicago Municipal Code 5-12-XXX',
  lastUpdated: '2024-09-02',
  relatedSections: ['5-12-YYY']
}
```

### Adding Situation Workflows
```typescript
// Add to RTLOSituationEngine.situations
{
  id: 'situation-id',
  title: 'Chicago RTLO Compliance Process',
  userType: 'landlord',
  description: 'Process description',
  steps: [
    {
      stepNumber: 1,
      action: 'Action per Chicago RTLO',
      rtloSection: '5-12-XXX',
      timeframe: 'RTLO deadline',
      required: true,
      details: 'Chicago RTLO requirements'
    }
  ],
  warnings: ['Chicago RTLO warnings'],
  relatedSections: ['5-12-XXX']
}
```

## Testing

```bash
# Test Chicago RTLO specific functionality
npm run test:rtlo

# Test all functionality
npm test
```

## Architecture

```
┌─────────────────────────────────────────┐
│         Chicago RTLO Frontend          │
│    (React - RTLO Chapter 5-12 Only)    │
└─────────────────┬───────────────────────┘
                  │
┌─────────────────▼───────────────────────┐
│      Cloudflare Worker (Hono)          │
│  ┌─────────────┬─────────────────────┐  │
│  │RTLO Search  │ RTLO Situations     │  │
│  │Engine       │ Engine              │  │
│  └─────────────┴─────────────────────┘  │
└─────────────────┬───────────────────────┘
                  │
┌─────────────────▼───────────────────────┐
│      Chicago RTLO Knowledge Base       │
│   (KV Store - Municipal Code 5-12)     │
└─────────────────────────────────────────┘
```

## Compliance & Legal

**Source Authority**: Chicago Municipal Code Chapter 5-12 ONLY  
**Last Updated**: September 2, 2024  
**Scope**: Chicago city limits residential rental properties  
**Limitations**: Does not include federal, state, or county housing laws  

## Maintenance Schedule

- **Weekly**: Monitor Chicago Municipal Code updates
- **Monthly**: Review and update Q&A accuracy  
- **Quarterly**: Full RTLO compliance review
- **Annually**: Complete system audit against current ordinance

---

**Important**: This system provides guidance on Chicago RTLO ONLY. Additional federal, state, and local laws may apply to landlord-tenant relationships in Chicago. Always consult qualified legal counsel for specific situations.

**ChittyOS Integration**: Built for the ChittyOS legal technology ecosystem - creating informed clients who understand their Chicago RTLO rights and obligations.